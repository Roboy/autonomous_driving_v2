<!--
Launch the navigation stack to run on a static map published by map server.
-->
<launch>
  <arg name="map_config"
       default="$(find navigation)/config/map.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server"
        args="$(arg map_config)"/>
  <node pkg="move_base" type="move_base" respawn="false" name="move_base"
        output="screen">
    <rosparam file="$(find navigation)/config/base_local_planner.yaml"
              command="load"/>
    <rosparam file="$(find navigation)/config/quadtree_planner.yaml"
              command="load"/>
    <rosparam file="$(find navigation)/config/global_costmap.yaml"
              command="load"/>
    <rosparam file="$(find navigation)/config/local_costmap.yaml"
              command="load"/>
    <rosparam file="$(find navigation)/config/common_costmap.yaml"
              command="load" ns="global_costmap"/>
    <rosparam file="$(find navigation)/config/common_costmap.yaml"
              command="load" ns="local_costmap"/>
    <param name="base_local_planner"
           value="base_local_planner/TrajectoryPlannerROS"/>
    <param name="base_global_planner" value="quadtree_planner::QuadTreePlanner"/>
    <param name="recovery_behavior_enabled" value="false" />
    <param name="max_planning_retries" value="0" />
  </node>
  <node pkg="navigation" type="tf_to_odom.py" respawn="false"
        name="fake_odom" output="screen"/>
  <node pkg="quadtree_planner" type="autonomous_driving" respawn="false"
        name="autonomous_driving" output="screen"/>
  <node pkg="quadtree_planner" type="calculateHasArrivedFlag.py" respawn="false"
        name="calculateFlag" output="screen"/>
</launch>
