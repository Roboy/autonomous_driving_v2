<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dubins_8c" kind="file" language="C++">
    <compoundname>dubins.c</compoundname>
    <includes local="no">math.h</includes>
    <includes refid="dubins_8h" local="yes">../include/quadtree_planner/dubins.h</includes>
    <includedby refid="quadtree__planner_8cpp" local="yes">/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/quadtree_planner.cpp</includedby>
    <incdepgraph>
      <node id="58">
        <label>../include/quadtree_planner/dubins.h</label>
        <link refid="dubins_8h_source"/>
      </node>
      <node id="56">
        <label>/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c</label>
        <link refid="dubins_8c"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>math.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structDubinsIntermediateResults" prot="public">DubinsIntermediateResults</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dubins_8c_1a002b2f4894492820fe708b1b7e7c5e70" prot="public" static="no">
        <name>EPSILON</name>
        <initializer>(10e-10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="28" column="9" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dubins_8c_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>(3.14159265359)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="31" column="9" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dubins_8c_1a45f8c604b4008a278fe9bde5156489ee" prot="public" static="no">
        <name>SegmentType</name>
        <enumvalue id="dubins_8c_1a45f8c604b4008a278fe9bde5156489eead5538a2415f474c86f9f17b1680d9525" prot="public">
          <name>L_SEG</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dubins_8c_1a45f8c604b4008a278fe9bde5156489eea2d0c1dc59e5ace5955ab9d0473a2dc20" prot="public">
          <name>S_SEG</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dubins_8c_1a45f8c604b4008a278fe9bde5156489eeac3629b83f910df450c077c28765c3c16" prot="public">
          <name>R_SEG</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="36" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="35" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dubins_8c_1a1a51bceccd52ea759083647b78e28f8e" prot="public" static="no" mutable="no">
        <type>const SegmentType</type>
        <definition>const SegmentType DIRDATA[][3]</definition>
        <argsstring>[][3]</argsstring>
        <name>DIRDATA</name>
        <initializer>= {
        { L_SEG, S_SEG, L_SEG },
        { L_SEG, S_SEG, R_SEG },
        { R_SEG, S_SEG, L_SEG },
        { R_SEG, S_SEG, R_SEG },
        { R_SEG, L_SEG, R_SEG },
        { L_SEG, R_SEG, L_SEG }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="43" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dubins_8c_1a2d0b682756e42151bdb4c23de3c42c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_word</definition>
        <argsstring>(DubinsIntermediateResults *in, DubinsPathType pathType, double out[3])</argsstring>
        <name>dubins_word</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>DubinsPathType</type>
          <declname>pathType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="66" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="416" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a8d00c9b0c5e6a3eaab12cd32ca7cdcd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_intermediate_results</definition>
        <argsstring>(DubinsIntermediateResults *in, double q0[3], double q1[3], double rho)</argsstring>
        <name>dubins_intermediate_results</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q0</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>q1</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="67" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="293" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1ae0199ea04fb0588ce5c62947ba5b2304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fmodr</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>fmodr</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Floating point modulus suitable for rings</para><para>fmod doesn&apos;t behave correctly for angular quantities, this function does </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="74" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a92a990597924f10fc703cd10c7110866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mod2pi</definition>
        <argsstring>(double theta)</argsstring>
        <name>mod2pi</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="79" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1aa7a973ab8d913f35ddb770390c04a138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_shortest_path</definition>
        <argsstring>(DubinsPath *path, double q0[3], double q1[3], double rho)</argsstring>
        <name>dubins_shortest_path</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q0</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>q1</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a path from an initial configuration to a target configuration, with a specified maximum turning radii</para><para>A configuration is (x, y, theta), where theta is in radians, with zero along the line x = 0, and counter-clockwise is positive</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the resultant path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q0</parametername>
</parameternamelist>
<parameterdescription>
<para>- a configuration specified as an array of x, y, theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>- a configuration specified as an array of x, y, theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>- turning radius of the vehicle (forward velocity divided by maximum angular velocity) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- non-zero on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="84" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="84" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a66250397a521fe86e07beaca8feb1244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_path</definition>
        <argsstring>(DubinsPath *path, double q0[3], double q1[3], double rho, DubinsPathType pathType)</argsstring>
        <name>dubins_path</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q0</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>q1</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>DubinsPathType</type>
          <declname>pathType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a path with a specified word from an initial configuration to a target configuration, with a specified turning radius</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the resultant path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q0</parametername>
</parameternamelist>
<parameterdescription>
<para>- a configuration specified as an array of x, y, theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>- a configuration specified as an array of x, y, theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>- turning radius of the vehicle (forward velocity divided by maximum angular velocity) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathType</parametername>
</parameternamelist>
<parameterdescription>
<para>- the specific path type to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- non-zero on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="124" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="124" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1aab74dd0bb389d87d3c3e46d457cb7ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dubins_path_length</definition>
        <argsstring>(DubinsPath *path)</argsstring>
        <name>dubins_path_length</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the length of an initialised path</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the path to find the length of </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="146" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a2d942cdfe47872b31ca38537a20d2458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dubins_segment_length</definition>
        <argsstring>(DubinsPath *path, int i)</argsstring>
        <name>dubins_segment_length</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the length of a specific segment in an initialized path</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the path to find the length of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- the segment you to get the length of (0-2) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="156" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a6036bd0c9a693b9ebaaa1d5731856438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dubins_segment_length_normalized</definition>
        <argsstring>(DubinsPath *path, int i)</argsstring>
        <name>dubins_segment_length_normalized</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the normalized length of a specific segment in an initialized path</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the path to find the length of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- the segment you to get the length of (0-2) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="165" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a32c354179c26a54fdb976c7423816098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DubinsPathType</type>
        <definition>DubinsPathType dubins_path_type</definition>
        <argsstring>(DubinsPath *path)</argsstring>
        <name>dubins_path_type</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract an integer that represents which path type was used</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- an initialised path </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- one of LSL, LSR, RSL, RSR, RLR or LRL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="174" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1aea06d579bc4f2ac1b696cb90d1b4971b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dubins_segment</definition>
        <argsstring>(double t, double qi[3], double qt[3], SegmentType type)</argsstring>
        <name>dubins_segment</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>qi</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>qt</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>SegmentType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="179" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="179" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1adce56e5f9fc82d4d19f839f03495831f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_path_sample</definition>
        <argsstring>(DubinsPath *path, double t, double q[3])</argsstring>
        <name>dubins_path_sample</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the configuration along the path, using the parameter t</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- an initialised path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- a length measure, where 0 &lt;= t &lt; dubins_path_length(path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>- the configuration result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- non-zero if &apos;t&apos; is not in the correct range </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="203" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="203" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a995863c9522407ffe017dfd24c19cd6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_path_sample_many</definition>
        <argsstring>(DubinsPath *path, double stepSize, DubinsPathSamplingCallback cb, void *user_data)</argsstring>
        <name>dubins_path_sample_many</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>DubinsPathSamplingCallback</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Walk along the path at a fixed sampling interval, calling the callback function at each interval</para><para>The sampling process continues until the whole path is sampled, or the callback returns a non-zero value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- the path to sample </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>- the distance along the path for subsequent samples </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>- the callback function to call for each sample </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>- optional information to pass on to the callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- zero on successful completion, or the result of the callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="245" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="245" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1ad54cbb8e8982aab12a1b872533f9c0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_path_endpoint</definition>
        <argsstring>(DubinsPath *path, double q[3])</argsstring>
        <name>dubins_path_endpoint</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to identify the endpoint of a path</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- an initialised path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>- the configuration result </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="264" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a10e3d51a530a9acfd70eeda51ce51343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_extract_subpath</definition>
        <argsstring>(DubinsPath *path, double t, DubinsPath *newpath)</argsstring>
        <name>dubins_extract_subpath</name>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref> *</type>
          <declname>newpath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to extract a subset of a path</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- an initialised path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- a length measure, where 0 &lt; t &lt; dubins_path_length(path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>- the resultant path </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="269" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="269" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a2c8337a7cf09ef731bbe37e94ad02c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_LSL</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_LSL</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="326" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="326" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a25751d6a40ba2104caa3e3372c9c26ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_RSR</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_RSR</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="344" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="344" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a21dc8f3e4583b7101a9a85ef78f60354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_LSR</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_LSR</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="358" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="358" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a9904f476943595d67ae01385fc4536b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_RSL</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_RSL</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="372" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="372" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1a98ed116a8bcf61aaa1c973408d93b627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_RLR</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_RLR</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="386" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="386" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="dubins_8c_1aa60342cee0e2373b3b7edaceea140fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dubins_LRL</definition>
        <argsstring>(DubinsIntermediateResults *in, double out[3])</argsstring>
        <name>dubins_LRL</name>
        <param>
          <type><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" line="401" column="1" bodyfile="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c" bodystart="401" bodyend="414"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2008-2018,<sp/>Andrew<sp/>Walker</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/quadtree_planner/dubins.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPSILON<sp/>(10e-10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/>(3.14159265359)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>L_SEG<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>S_SEG<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>R_SEG<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/>SegmentType;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>segment<sp/>types<sp/>for<sp/>each<sp/>of<sp/>the<sp/>Path<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegmentType<sp/>DIRDATA[][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>L_SEG,<sp/>S_SEG,<sp/>L_SEG<sp/>},</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>L_SEG,<sp/>S_SEG,<sp/>R_SEG<sp/>},</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>R_SEG,<sp/>S_SEG,<sp/>L_SEG<sp/>},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>R_SEG,<sp/>S_SEG,<sp/>R_SEG<sp/>},</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>R_SEG,<sp/>L_SEG,<sp/>R_SEG<sp/>},</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>L_SEG,<sp/>R_SEG,<sp/>L_SEG<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structDubinsIntermediateResults" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sa;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sb;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ca;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cb;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_ab;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_sq;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_word(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/>DubinsPathType<sp/>pathType,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3]);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_intermediate_results(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q0[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q1[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fmodr(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>y*floor(x/y);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mod2pi(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmodr(<sp/>theta,<sp/>2<sp/>*<sp/>M_PI<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_shortest_path(<ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q0[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q1[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>errcode;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref><sp/>in;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>params[3];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cost;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best_cost<sp/>=<sp/>INFINITY;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_word<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/>dubins_intermediate_results(&amp;in,<sp/>q0,<sp/>q1,<sp/>rho);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errcode<sp/>!=<sp/>EDUBOK)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errcode;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;qi[0]<sp/>=<sp/>q0[0];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;qi[1]<sp/>=<sp/>q0[1];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;qi[2]<sp/>=<sp/>q0[2];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;rho<sp/>=<sp/>rho;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DubinsPathType<sp/>pathType<sp/>=<sp/>(DubinsPathType)i;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/>dubins_word(&amp;in,<sp/>pathType,<sp/>params);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errcode<sp/>==<sp/>EDUBOK)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cost<sp/>=<sp/>params[0]<sp/>+<sp/>params[1]<sp/>+<sp/>params[2];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cost<sp/>&lt;<sp/>best_cost)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_word<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_cost<sp/>=<sp/>cost;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[0]<sp/>=<sp/>params[0];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[1]<sp/>=<sp/>params[1];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[2]<sp/>=<sp/>params[2];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;type<sp/>=<sp/>pathType;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(best_word<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_path(<ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q0[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q1[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/>DubinsPathType<sp/>pathType)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errcode;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref><sp/>in;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/>dubins_intermediate_results(&amp;in,<sp/>q0,<sp/>q1,<sp/>rho);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errcode<sp/>==<sp/>EDUBOK)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>params[3];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/>dubins_word(&amp;in,<sp/>pathType,<sp/>params);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errcode<sp/>==<sp/>EDUBOK)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[0]<sp/>=<sp/>params[0];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[1]<sp/>=<sp/>params[1];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;param[2]<sp/>=<sp/>params[2];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;qi[0]<sp/>=<sp/>q0[0];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;qi[1]<sp/>=<sp/>q0[1];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;qi[2]<sp/>=<sp/>q0[2];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;rho<sp/>=<sp/>rho;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;type<sp/>=<sp/>pathType;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errcode;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dubins_path_length(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>path-&gt;param[0];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>path-&gt;param[1];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>path-&gt;param[2];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>length<sp/>*<sp/>path-&gt;rho;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dubins_segment_length(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(i<sp/>&lt;<sp/>0)<sp/>||<sp/>(i<sp/>&gt;<sp/>2)<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INFINITY;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path-&gt;param[i]<sp/>*<sp/>path-&gt;rho;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dubins_segment_length_normalized(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(i<sp/>&lt;<sp/>0)<sp/>||<sp/>(i<sp/>&gt;<sp/>2)<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INFINITY;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path-&gt;param[i];</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">DubinsPathType<sp/>dubins_path_type(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path-&gt;type;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dubins_segment(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qi[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qt[3],<sp/>SegmentType<sp/>type)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>sin(qi[2]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ct<sp/>=<sp/>cos(qi[2]);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>type<sp/>==<sp/>L_SEG<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[0]<sp/>=<sp/>+sin(qi[2]+t)<sp/>-<sp/>st;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[1]<sp/>=<sp/>-cos(qi[2]+t)<sp/>+<sp/>ct;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>type<sp/>==<sp/>R_SEG<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[0]<sp/>=<sp/>-sin(qi[2]-t)<sp/>+<sp/>st;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[1]<sp/>=<sp/>+cos(qi[2]-t)<sp/>-<sp/>ct;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[2]<sp/>=<sp/>-t;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>type<sp/>==<sp/>S_SEG<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[0]<sp/>=<sp/>ct<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[1]<sp/>=<sp/>st<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt[2]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>qt[0]<sp/>+=<sp/>qi[0];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>qt[1]<sp/>+=<sp/>qi[1];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>qt[2]<sp/>+=<sp/>qi[2];</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_path_sample(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q[3]<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tprime<sp/>is<sp/>the<sp/>normalised<sp/>variant<sp/>of<sp/>the<sp/>parameter<sp/>t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tprime<sp/>=<sp/>t<sp/>/<sp/>path-&gt;rho;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qi[3];<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>translated<sp/>initial<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q1[3];<sp/></highlight><highlight class="comment">/*<sp/>end-of<sp/>segment<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2[3];<sp/></highlight><highlight class="comment">/*<sp/>end-of<sp/>segment<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegmentType*<sp/>types<sp/>=<sp/>DIRDATA[path-&gt;type];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p1,<sp/>p2;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>t<sp/>&lt;<sp/>0<sp/>||<sp/>t<sp/>&gt;<sp/>dubins_path_length(path)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBPARAM;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>qi[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>qi[1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>qi[2]<sp/>=<sp/>path-&gt;qi[2];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>the<sp/>target<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>path-&gt;param[0];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>path-&gt;param[1];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>dubins_segment(<sp/>p1,<sp/><sp/><sp/><sp/><sp/><sp/>qi,<sp/><sp/><sp/><sp/>q1,<sp/>types[0]<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>dubins_segment(<sp/>p2,<sp/><sp/><sp/><sp/><sp/><sp/>q1,<sp/><sp/><sp/><sp/>q2,<sp/>types[1]<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tprime<sp/>&lt;<sp/>p1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dubins_segment(<sp/>tprime,<sp/>qi,<sp/>q,<sp/>types[0]<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tprime<sp/>&lt;<sp/>(p1+p2)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dubins_segment(<sp/>tprime-p1,<sp/>q1,<sp/>q,<sp/><sp/>types[1]<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dubins_segment(<sp/>tprime-p1-p2,<sp/>q2,<sp/>q,<sp/><sp/>types[2]<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>the<sp/>target<sp/>configuration,<sp/>translate<sp/>back<sp/>to<sp/>the<sp/>original<sp/>starting<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>q[0]<sp/>=<sp/>q[0]<sp/>*<sp/>path-&gt;rho<sp/>+<sp/>path-&gt;qi[0];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>q[1]<sp/>=<sp/>q[1]<sp/>*<sp/>path-&gt;rho<sp/>+<sp/>path-&gt;qi[1];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>q[2]<sp/>=<sp/>mod2pi(q[2]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_path_sample_many(<ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stepSize,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DubinsPathSamplingCallback<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retcode;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q[3];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>dubins_path_length(path);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>x<sp/>&lt;<sp/><sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dubins_path_sample(<sp/>path,<sp/>x,<sp/>q<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retcode<sp/>=<sp/>cb(q,<sp/>x,<sp/>user_data);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retcode<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retcode;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>stepSize;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_path_endpoint(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q[3]<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dubins_path_sample(<sp/>path,<sp/>dubins_path_length(path)<sp/>-<sp/>EPSILON,<sp/>q<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_extract_subpath(<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/><ref refid="structDubinsPath" kindref="compound">DubinsPath</ref>*<sp/>newpath<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>the<sp/>true<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tprime<sp/>=<sp/>t<sp/>/<sp/>path-&gt;rho;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((t<sp/>&lt;<sp/>0)<sp/>||<sp/>(t<sp/>&gt;<sp/>dubins_path_length(path)))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBPARAM;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>most<sp/>of<sp/>the<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;qi[0]<sp/>=<sp/>path-&gt;qi[0];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;qi[1]<sp/>=<sp/>path-&gt;qi[1];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;qi[2]<sp/>=<sp/>path-&gt;qi[2];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;rho<sp/><sp/><sp/>=<sp/>path-&gt;rho;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;type<sp/><sp/>=<sp/>path-&gt;type;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fix<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;param[0]<sp/>=<sp/>fmin(<sp/>path-&gt;param[0],<sp/>tprime<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;param[1]<sp/>=<sp/>fmin(<sp/>path-&gt;param[1],<sp/>tprime<sp/>-<sp/>newpath-&gt;param[0]);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath-&gt;param[2]<sp/>=<sp/>fmin(<sp/>path-&gt;param[2],<sp/>tprime<sp/>-<sp/>newpath-&gt;param[0]<sp/>-<sp/>newpath-&gt;param[1]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_intermediate_results(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q0[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q1[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy,<sp/>D,<sp/>d,<sp/>theta,<sp/>alpha,<sp/>beta;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rho<sp/>&lt;=<sp/>0.0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBBADRHO;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>q1[0]<sp/>-<sp/>q0[0];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>q1[1]<sp/>-<sp/>q0[1];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>=<sp/>sqrt(<sp/>dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>D<sp/>/<sp/>rho;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>required<sp/>to<sp/>prevent<sp/>domain<sp/>errors<sp/>if<sp/>dx=0<sp/>and<sp/>dy=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>mod2pi(atan2(<sp/>dy,<sp/>dx<sp/>));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>mod2pi(q0[2]<sp/>-<sp/>theta);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/><sp/>=<sp/>mod2pi(q1[2]<sp/>-<sp/>theta);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;alpha<sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;beta<sp/><sp/>=<sp/>beta;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;d<sp/><sp/><sp/><sp/><sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;sa<sp/><sp/><sp/><sp/>=<sp/>sin(alpha);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;sb<sp/><sp/><sp/><sp/>=<sp/>sin(beta);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;ca<sp/><sp/><sp/><sp/>=<sp/>cos(alpha);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;cb<sp/><sp/><sp/><sp/>=<sp/>cos(beta);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;c_ab<sp/><sp/>=<sp/>cos(alpha<sp/>-<sp/>beta);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;d_sq<sp/><sp/>=<sp/>d<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_LSL(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0,<sp/>tmp1,<sp/>p_sq;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp0<sp/>=<sp/>in-&gt;d<sp/>+<sp/>in-&gt;sa<sp/>-<sp/>in-&gt;sb;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>p_sq<sp/>=<sp/>2<sp/>+<sp/>in-&gt;d_sq<sp/>-<sp/>(2*in-&gt;c_ab)<sp/>+<sp/>(2<sp/>*<sp/>in-&gt;d<sp/>*<sp/>(in-&gt;sa<sp/>-<sp/>in-&gt;sb));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_sq<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>atan2(<sp/>(in-&gt;cb<sp/>-<sp/>in-&gt;ca),<sp/>tmp0<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mod2pi(tmp1<sp/>-<sp/>in-&gt;alpha);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>sqrt(p_sq);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(in-&gt;beta<sp/>-<sp/>tmp1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_RSR(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>in-&gt;d<sp/>-<sp/>in-&gt;sa<sp/>+<sp/>in-&gt;sb;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_sq<sp/>=<sp/>2<sp/>+<sp/>in-&gt;d_sq<sp/>-<sp/>(2<sp/>*<sp/>in-&gt;c_ab)<sp/>+<sp/>(2<sp/>*<sp/>in-&gt;d<sp/>*<sp/>(in-&gt;sb<sp/>-<sp/>in-&gt;sa));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p_sq<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp1<sp/>=<sp/>atan2(<sp/>(in-&gt;ca<sp/>-<sp/>in-&gt;cb),<sp/>tmp0<sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mod2pi(in-&gt;alpha<sp/>-<sp/>tmp1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>sqrt(p_sq);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(tmp1<sp/>-in-&gt;beta);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_LSR(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_sq<sp/>=<sp/>-2<sp/>+<sp/>(in-&gt;d_sq)<sp/>+<sp/>(2<sp/>*<sp/>in-&gt;c_ab)<sp/>+<sp/>(2<sp/>*<sp/>in-&gt;d<sp/>*<sp/>(in-&gt;sa<sp/>+<sp/>in-&gt;sb));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p_sq<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/><sp/><sp/><sp/>=<sp/>sqrt(p_sq);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>atan2(<sp/>(-in-&gt;ca<sp/>-<sp/>in-&gt;cb),<sp/>(in-&gt;d<sp/>+<sp/>in-&gt;sa<sp/>+<sp/>in-&gt;sb)<sp/>)<sp/>-<sp/>atan2(-2.0,<sp/>p);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mod2pi(tmp0<sp/>-<sp/>in-&gt;alpha);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(tmp0<sp/>-<sp/>mod2pi(in-&gt;beta));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_RSL(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_sq<sp/>=<sp/>-2<sp/>+<sp/>in-&gt;d_sq<sp/>+<sp/>(2<sp/>*<sp/>in-&gt;c_ab)<sp/>-<sp/>(2<sp/>*<sp/>in-&gt;d<sp/>*<sp/>(in-&gt;sa<sp/>+<sp/>in-&gt;sb));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p_sq<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/><sp/><sp/><sp/>=<sp/>sqrt(p_sq);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>atan2(<sp/>(in-&gt;ca<sp/>+<sp/>in-&gt;cb),<sp/>(in-&gt;d<sp/>-<sp/>in-&gt;sa<sp/>-<sp/>in-&gt;sb)<sp/>)<sp/>-<sp/>atan2(2.0,<sp/>p);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mod2pi(in-&gt;alpha<sp/>-<sp/>tmp0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(in-&gt;beta<sp/>-<sp/>tmp0);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_RLR(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>(6.<sp/>-<sp/>in-&gt;d_sq<sp/>+<sp/>2*in-&gt;c_ab<sp/>+<sp/>2*in-&gt;d*(in-&gt;sa<sp/>-<sp/>in-&gt;sb))<sp/>/<sp/>8.;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/><sp/>=<sp/>atan2(<sp/>in-&gt;ca<sp/>-<sp/>in-&gt;cb,<sp/>in-&gt;d<sp/>-<sp/>in-&gt;sa<sp/>+<sp/>in-&gt;sb<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fabs(tmp0)<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>mod2pi((2*M_PI)<sp/>-<sp/>acos(tmp0)<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>mod2pi(in-&gt;alpha<sp/>-<sp/>phi<sp/>+<sp/>mod2pi(p/2.));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(in-&gt;alpha<sp/>-<sp/>in-&gt;beta<sp/>-<sp/>t<sp/>+<sp/>mod2pi(p));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_LRL(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp0<sp/>=<sp/>(6.<sp/>-<sp/>in-&gt;d_sq<sp/>+<sp/>2*in-&gt;c_ab<sp/>+<sp/>2*in-&gt;d*(in-&gt;sb<sp/>-<sp/>in-&gt;sa))<sp/>/<sp/>8.;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>atan2(<sp/>in-&gt;ca<sp/>-<sp/>in-&gt;cb,<sp/>in-&gt;d<sp/>+<sp/>in-&gt;sa<sp/>-<sp/>in-&gt;sb<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fabs(tmp0)<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>mod2pi(<sp/>2*M_PI<sp/>-<sp/>acos(<sp/>tmp0)<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>mod2pi(-in-&gt;alpha<sp/>-<sp/>phi<sp/>+<sp/>p/2.);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>mod2pi(mod2pi(in-&gt;beta)<sp/>-<sp/>in-&gt;alpha<sp/>-t<sp/>+<sp/>mod2pi(p));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBOK;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dubins_word(<ref refid="structDubinsIntermediateResults" kindref="compound">DubinsIntermediateResults</ref>*<sp/>in,<sp/>DubinsPathType<sp/>pathType,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out[3])</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(pathType)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LSL:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_LSL(in,<sp/>out);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RSL:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_RSL(in,<sp/>out);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LSR:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_LSR(in,<sp/>out);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RSR:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_RSR(in,<sp/>out);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LRL:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_LRL(in,<sp/>out);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RLR:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dubins_RLR(in,<sp/>out);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>EDUBNOPATH;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/maximilian/RoboyRepoDevelPlanning/src/quadtree_planner/src/dubins.c"/>
  </compounddef>
</doxygen>
