<!--
A launch file to instantiate a tricycle model, start gazebo simulation and
run all controllers required to control the tricycle over /cmd_vel topic.
-->
<launch>
  <arg name="model_urdf"
       default="$(find simulation)/tricycle/model.urdf"/>
  <arg name="model_name" default="tricycle"/>
  <arg name="model_frame" default="base_link"/>
  <!-- include the file that loads urdf description of the robot -->
  <include file="$(find simulation)/launch/model.launch">
    <arg name="model_urdf" value="$(arg model_urdf)"/>
  </include>

  <include file="$(find simulation)/launch/gazebo.launch">
    <arg name="model_urdf" value="$(arg model_urdf)"/>
    <arg name="model_name" value="$(arg model_name)"/>
    <arg name="model_frame" value="$(arg model_frame)"/>
  </include>
  <!-- <node name="joint_state_publisher" pkg="joint_state_publisher"
        type="joint_state_publisher" /> -->
  <rosparam command="load"
            file="$(find simulation)/tricycle/config/joints_state.yaml"
            ns="tricycle_joint_state_controller"/>
  <rosparam command="load"
            file="$(find simulation)/tricycle/config/front_part_controller.yaml"
            ns="tricycle_front_part_controller"/>
  <rosparam command="load"
            file="$(find simulation)/tricycle/config/wheels_controller.yaml"
            ns="tricycle_wheels_controller"/>
  <rosparam command="load"
            file="$(find simulation)/tricycle/config/ros_control.yaml"
            ns="/gazebo_ros_control"/>
  <node name="tricycle_controller_spawner" pkg="controller_manager"
        type="spawner"
        args="tricycle_joint_state_controller
        tricycle_front_part_controller
        tricycle_wheels_controller
          --shutdown-timeout 3"/>
  <node name="tricycle_controller" pkg="simulation"
        type="tricycle_controller.py"/>

</launch>